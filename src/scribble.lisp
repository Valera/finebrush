(in-package :finebrush)

(defparameter *src-location* (asdf:component-pathname (asdf:find-system :finebrush)))

(cffi:defcfun gtk_rc_parse :void
  (filename (:pointer)))

(defun rc-parse (name)
  (cffi:with-foreign-string (foreign-name name)
    (gtk_rc_parse foreign-name)))

;; FIXME: cleanup

(defun scribble-xinput ()
  (let (pixmap
	input-d
	brush-stroke
	hsv
	viewport
	spacing-adjustment
	alpha-adjustment
	(builder (let ((builder (make-instance 'builder)))
		   (builder-add-from-file builder (namestring (merge-pathnames "ui/mainwin.glade" *src-location*)))
		   builder)))
    (labels ((bgo (object-name) (builder-get-object builder object-name))
	     (realize (widget)
;	       (setf (widget-width-request widget) 3000)
;	       (setf (widget-height-request widget) 2000)

	       (iter (for i in '(:pointer-motion-mask :pointer-motion-hint-mask
				 :leave-notify-mask :button-press-mask :button-release-mask))
		     (pushnew i (gdk-window-events (widget-window widget)))))
	     (configure-event (widget event)
	       (declare (ignore event))
	       (let* ((window (widget-window widget))
		      (gc (graphics-context-new window)))
		 (multiple-value-bind (w h) (gdk:drawable-get-size (widget-window widget))
		   (print (list 'conf w h) *debug*)
		   (setf pixmap (pixmap-new window w h -1))
		   (setf (graphics-context-rgb-fg-color gc)
			 (make-color :red 65535 :green 65535 :blue 65535))
		   (gdk::draw-rectangle pixmap gc t 0 0 w h))
		 t))
	     (expose-event (widget event)
;	  (setf (adjustment-upper (viewport-vadjustment viewport)) 4000)
;	       (setf (widget-width-request widget) 100)
;	       (setf (widget-height-request widget) 100)
;	       (setf (adjustment-lower (viewport-vadjustment viewport)) -400d0)
	       (let* ((window (widget-window widget))
		      (gc (graphics-context-new window))
		      (rect (event-expose-area event)))
		 (setf (graphics-context-rgb-fg-color gc)
		       (make-color :red 0000 :green 0000 :blue 0000))
		 (draw-rectangle window gc t (rectangle-x rect) (rectangle-y rect)
				 (rectangle-width rect) (rectangle-height rect)))
	       (let* ((rect (event-expose-area event))
		      (window (widget-window widget))
		      (gc (graphics-context-new window)))
		 (draw-drawable window gc pixmap
				(rectangle-x rect) (rectangle-y rect)
				(rectangle-x rect) (rectangle-y rect)
				(rectangle-width rect) (rectangle-height rect)))
	       nil)
	     (draw-brush (widget source x y pressure)
	       (flet ((greyscale-color (x)
			(make-color :red x :green x :blue x)))
		 (let* ((gc (graphics-context-new pixmap))
			(pressure (if (eq :mouse source)
				      (clamp (or pressure 1) 0 1)
				      (clamp (or pressure 0) 0 1)))
			(x (round (- x (* 10 pressure))))
			(y (round (- y (* 10 pressure))))
			(w (round (* 20 pressure)))
			(h (round (* 20 pressure))))
		   (setf (graphics-context-rgb-fg-color gc)
			 (greyscale-color
			  (ecase source
			    (:mouse 15000)
			    (:pen 0)
			    (:eraser 65535)
			    (:cursor 45000))))
		   (gdk::draw-rectangle pixmap gc t
					x y w h)
		   (widget-queue-draw-area widget x y w h))))
	     (button-press-event (widget event)
	       (when (and pixmap
			  (= (event-button-button event) 1))
		 (let ((pressure (event-get-axis event :pressure))
		       (source (gdk-device-source (event-button-device event))))
		   (setf brush-stroke (make-instance 'brush-stroke :pressure (if (eq :mouse source)
										 (clamp (or pressure 1) 0 1)
										 (clamp (or pressure 0) 0 1))
						     :x (event-button-x event) :y (event-button-y event)
						     :brush :cairo-round-soft
						     :color (bind:bind (((:values h s v) (h-s-v-get-color hsv))
									((:values r g b) (h-s-v-to-r-g-b h s v))
									(r1 (* 65535 r))
									(g1 (* 65535 g))
									(b1 (* 65535 b)))
							      (print (list r g b) *debug*)
							      (make-color :red r1 :green g1 :blue b1))
						     #+ nil (flet ((greyscale-color (x)
								     (make-color :red x :green x :blue x)))
							      (greyscale-color
							       (ecase source
								 (:mouse 15000)
								 (:pen 0)
								 (:eraser 65535)
								 (:cursor 45000))))
						     :spacing (adjustment-value spacing-adjustment)
						     :alpha (print (adjustment-value alpha-adjustment) *debug*)
						     :pixmap pixmap :widget widget)))))
	     (button-release-event (widget event)
	       (setf brush-stroke nil))
	     (motion-notify-event (widget event)
	       (let ((device (event-motion-device event))
		     x y pressure state)
		 (if (= (event-motion-is-hint event) 1)
		     (setf x (event-get-axis event :x)
			   y (event-get-axis event :y)
			   pressure (event-get-axis event :pressure)
			   state (event-motion-state event))
		     (multiple-value-bind (retval x1 y1 state1)
			 (gdk-window-get-pointer (widget-window widget))
		       (declare (ignore retval))
		       (setf x x1 y y1 
			     pressure (event-get-axis event :pressure)
			     state state1)))
		 (if (and pixmap
			  (member :button1-mask state))
		     (when brush-stroke
		       (add-point-to-stroke brush-stroke x y (if (eq :mouse (gdk-device-source device))
								 (clamp (or pressure 1) 0 1)
								 (clamp (or pressure 0) 0 1)))
		       (draw-stroke brush-stroke)))))
	     (create-input-dialog ()
	       (unless input-d
		 (setf input-d (make-instance 'input-dialog))
		 (connect-signal input-d "destroy"
				 #'(lambda (object)
				     (setf input-d nil)
				     (object-destroy object)))
		 (widget-show input-d))))
      (within-main-loop
;	(rc-parse "/usr/share/themes/Equinox Glass/gtk-2.0/gtkrc")
;	(rc-parse "/usr/share/themes/Redmond/gtk-2.0/gtkrc")
	(let ((w (bgo "window1"))
	      (da (bgo "drawingarea1" ))
	      (input-dialog-button (bgo "button1"))
	      (v-box-2 (bgo "vbox2"))
	      (h-s-v (make-instance 'h-s-v))
	      (new-painting-dialog (bgo "new-painting-dialog")))
;	  (widget-modify-fg (bgo "viewport1") :normal (make-color :red 0 :green 0 :blue 0))
;	  (widget-modify-bg (bgo "viewport1") :normal (make-color :red 0 :green 0 :blue 0))
	  (connect-signal (bgo "viewport1") "expose-event" (lambda (widget event)
							     (print 'asdfg *debug*)
							     (let* ((window (widget-window widget))
								    (gc (graphics-context-new window))
								    (rect (event-expose-area event)))
							       (print (list (rectangle-x rect) (rectangle-y rect)
									    (rectangle-width rect) (rectangle-height rect)) *debug*)
							       (setf (graphics-context-rgb-fg-color gc)
								     (make-color :red 0000 :green 40000 :blue 0000))
       						       (draw-rectangle window gc t (rectangle-x rect) (rectangle-y rect)
									       (rectangle-width rect) (rectangle-height rect)))) :after t)
	  (setf spacing-adjustment (bgo "spacing-adjustment"))
	  (setf (adjustment-value spacing-adjustment) 2d0)
	  (setf alpha-adjustment (bgo "brush-alpha-adjustment"))
	  (setf viewport (bgo "viewport1"))
	  (print (adjustment-lower (viewport-vadjustment viewport)) *debug*)
;	  (setf (adjustment-lower (viewport-vadjustment viewport)) -400d0)
;	  (setf (adjustment-upper (viewport-vadjustment viewport)) 4000d0)
	  (box-pack-start v-box-2 h-s-v :expand nil :fill nil)
	  (setf hsv h-s-v)
	  (setf (widget-width-request h-s-v) 200)
	  (setf (widget-height-request h-s-v) 200)
;	       (setf (widget-width-request da) 100)
;	       (setf (widget-height-request da) 100)
	  (h-s-v-set-metrics h-s-v 180 20)
#+nil	  (print (container-children (first (container-children (first (container-children color-selection))))) *debug*)
	  (iter (for device in (remove-if-not (lambda (x)
						(member (gdk-device-source x) '(:cursor :pen :eraser)))
					      (gdk-devices-list)))
		(setf (gdk-device-mode device) :screen))
	  (connect-signal da "configure-event" #'configure-event)
	  (connect-signal da "expose-event" #'expose-event)
	  (connect-signal (bgo "new-painting-action") "activate" #'(lambda (action)
								     (declare (ignore action))
								     (widget-show new-painting-dialog)
								     (print (dialog-run new-painting-dialog) *debug*)
								     (widget-hide new-painting-dialog)))
	  (connect-signal (bgo "quit-action") "activate" #'(lambda (action)
						      (declare (ignore action))
						      (object-destroy w)))
	  (connect-signal w "destroy" #'(lambda (w)
					  (declare (ignore w))
					  (leave-gtk-main)))
	  (connect-signal da "button_press_event" #'button-press-event)
	  (connect-signal da "button_release_event" #'button-release-event)
	  (connect-signal da "motion_notify_event" #'motion-notify-event)
	  (connect-signal da "realize" #'realize)
	  (setf (widget-extension-events da) :cursor)
	  (widget-show da)
	  (widget-show w))))))
